
type S struct {
	ptr mut &S
}

type S2 struct {
	ptr `y mut &S
}

func foo(y int) {
	var x int = 3
	// y = 2
	var slice1 = new []int(1, 100)
	var i int = slice1[0]
	var slice2 mut *[]int = new []int(0, 100)
	var s &[]int = slice2
	// var s2 mut &int = &s[0]
	var s2 &int = &s[0]
}

func bar(aptr `a mut &S, bptr `b mut &S) {
	var a mut &S = aptr.ptr
	var b mut &S = new S{ptr: a}
}

func bar2(aptr `a mut &S, bptr `b mut &S) `a mut &S {
	return null
}

// func bar3(aptr `a mut &S, bptr `b mut &S) `x mut &S {

func bar4(aptr `a mut &S, bptr `b mut &S) mut &S2 {
}
