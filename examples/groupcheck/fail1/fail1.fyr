type S struct {
	next mut *S
	prev mut *S
}

/*
// Must fail
func foo(a -ga mut *S, b -gb mut *S) {
	a.next = b
}

// Must fail
func foo2(a -ga mut *S, b -gb mut *S) {
	var x mut *S = {next: a}
	b.next = x
}

// Must fail
func foo3(a -ga mut *S, b -gb mut *S) {
	var x mut *S = {next: a, prev: b}
}

// Must work
func foo4(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	if pass == 0 {
		x.next = a
		x.prev = a
	} else {
		if pass == 1 {
			x.next = b
		}
	}
}
*/

// Must fail
func foo4b(a -a mut *S, b -b mut *S, pass int) {
	var x mut *S = {}
	if pass == 0 {
		x.next = a
		x.prev = a
	} else {
		if pass == 1 {
			x.next = b
		}
	}
	x.next = a
}

// Must fail
func foo4x(a -a mut *S, b -b mut *S, pass int) {
	var x mut *S = {}
	if pass == 0 {
		x.next = b
	}
	x.next = a
}

/*
// Must fail
func foo4c(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	if pass == 0 {
		x.next = a
		x.prev = a
	} else {
		if pass == 1 {
			x.next = b
		}
	}
	if pass == 0 {
		x.next = a
	} else {
		x.prev = b
	}
}
*/

/*
// TODO: Scoped groups not implemented yet
func foo5(x -gx mut *S) {
	var a S = {}
	// x.next = &a
	a.next = x

	if true {
		var b S = {}
		a.next = &b
	}
}
*/

/*
// Must fail
func foo6(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	for {
		if pass == 0 {
			x.next = a
		} else {
			x.next = b
		}
	}
}

// must work
func foo7(a -ga mut *S, b -gb mut *S, pass int) {
	for {
		var x mut *S = {}
		if pass == 0 {
			x.next = a
		} else {
			x.next = b
		}
	}
}

// Must work
func foo8(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	for {
		if pass == 0 {
			x.next = a
			break
		} else {
			x.next = b
			break
		}
	}
}
*/

/*
// Must work
func foo9(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	for {
		if pass == 0 {
			x.next = a
			break
		}
		x.next = b
		break
	}
}
*/

/*
// Must not work
func foo10(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	for {
		x.next = b
		if pass == 0 {
			x.next = a
			break
		}
		break
	}
}
*/

/*
// must work
func foo11(a -ga mut *S, b -gb mut *S) {
	for {
		var x mut *S = {}
		if true {
			x.next = a
			continue
		}
		x.next = b
	}
}

// must work
func foo12(a -ga mut *S, b -gb mut *S, pass int) {
	var x mut *S = {}
	if pass == 0 {
		x.next = a
		return
	}
	x.next = b
}
*/
