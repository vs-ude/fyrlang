type S struct {
    X int
    Y int
    Next *S
    Iso -> *S
}

func test1(pass int) {
    var ptr1 mut *S = {}
    if pass == 0 {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable already here
		if groupOf(ptr1) != groupOf(ptr2) {
			panic("Compiler should see that ptr1 and ptr2 always belong to the same group")
		}
        ptr1.Next = ptr2
    }
}

func test2(pass int) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
    if pass == 0 {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable already here
		if groupOf(ptr1) != groupOf(ptr2) {
			panic("Compiler should see that ptr1 and ptr2 always belong to the same group")
		}
        // ptr1 and ptr2 should use the same group variable
        ptr1.Next = ptr2
		// ptr1 and ptr3 should not be merged until here
		if groupOf(ptr1) == groupOf(ptr3) {
			panic("ptr1 and ptr3 should merge dynamically later")
		}
        // Groups of ptr1 and ptr3 should be merged
        ptr2.Next = ptr3
		if groupOf(ptr1) != groupOf(ptr3) {
			panic("ptr1 and ptr3 should have merged")
		}
    }
	if pass == 0 && groupOf(ptr1) != groupOf(ptr3) {
		panic("ptr1 and ptr3 should have merged after if")
	}
	if pass != 0 && groupOf(ptr1) == groupOf(ptr3) {
		panic("ptr1 and ptr3 should not have merged after if")
	}
}

func test3(pass int, ptrA -a mut *S) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
	if groupOf(ptr1) == groupOf(ptr3) {
		panic("ptr1 and ptr3 should not have merged")
	}
	if groupOf(ptr3) == groupOf(ptrA) {
		panic("ptr3 and ptrA should not have merged")
	}
    if pass == 0 {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable already here
		if groupOf(ptr1) != groupOf(ptr2) {
			panic("Compiler should see that ptr1 and ptr2 always belong to the same group")
		}
        // ptr1 and ptr2 should use the same group variable
        ptr1.Next = ptr2
		// ptr1 and ptr3 should not be merged until here
		if groupOf(ptr1) == groupOf(ptr3) {
			panic("ptr1 and ptr3 should merge dynamically later")
		}
        // Groups of ptr2 and ptr3 should be merged
        ptr2.Next = ptr3
		if groupOf(ptr1) != groupOf(ptr3) {
			panic("ptr1 and ptr3 should have merged")
		}
        // All groups must be merged with group `a`.
        ptr3.Next = ptrA
		if groupOf(ptr1) != groupOf(ptrA) {
			panic("ptr1 and ptr3 and ptrA should have merged")
		}
    }
	if pass == 0 && groupOf(ptr1) != groupOf(ptr3) {
		panic("ptr1 and ptr3 should have merged after if")
	}
	if pass == 0 && groupOf(ptr1) != groupOf(ptrA) {
		panic("ptr1 and ptrA should have merged after if")
	}
	if pass != 0 && groupOf(ptr1) == groupOf(ptr3) {
		panic("ptr1 and ptr3 should not have merged after if")
	}
	if pass != 0 && groupOf(ptr1) == groupOf(ptrA) {
		panic("ptr1 and ptrA should not have merged after if")
	}
}

func test4() {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
	if groupOf(ptr1) == groupOf(ptr2) {
		panic("ptr1 and ptr2 should be different groups here")
	}
    ptr1 = {}
	if groupOf(ptr1) != groupOf(ptr2) {
		panic("ptr1 and ptr2 should be the same group in the following code")
	}
    ptr1.Next = ptr2
}

func test5(pass int) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
	grp1 := groupOf(ptr1)
	if groupOf(ptr1) == groupOf(ptr3) {
		panic("ptr1 and ptr3 should not have merged")
	}
	grp3 := groupOf(ptr3)
    if pass == 0 {
        ptr1 = {}
        var ptr2 mut *S = {}
		if groupOf(ptr1) == groupOf(ptr2) {
			panic("ptr1 and ptr2 should not never merge")
		}
    } else {
        ptr1 = {}
        ptr3 = {}
		if groupOf(ptr1) == groupOf(ptr3) {
			panic("ptr1 and ptr3 should not have merged in else-clause")
		}
    }
	if grp1 == groupOf(ptr1) {
		panic("Group of ptr1 should have changed in all cases")
	}
	if pass == 0 && grp3 != groupOf(ptr3) {
		panic("Group of ptr3 should not have changed after if-clause")
	}
	if pass != 0 && grp3 == groupOf(ptr3) {
		panic("Group of ptr3 should have changed after else-clause")
	}
	if groupOf(ptr1) == groupOf(ptr3) {
		panic("ptr1 and ptr3 should not have merged until here")
	}
    ptr1.Next = {}
    ptr3.Next = ptr1
	if groupOf(ptr1) != groupOf(ptr3) {
		panic("ptr1 and ptr3 should have merged here")
	}
}

func test6(pass int) {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
	grp1 := groupOf(ptr1)
	grp2 := groupOf(ptr2)
	if groupOf(ptr1) == groupOf(ptr2) {
		panic("ptr1 and ptr2 should not have merged")
	}
    if pass == 0 {
        ptr1 = {}
    } else {
        ptr2 = {}
    }
	if pass == 0 && grp1 == groupOf(ptr1) {
		panic("Group of ptr1 should have changed after if-clause")
	}
	if pass != 0 && grp2 == groupOf(ptr2) {
		panic("Group of ptr1 should have changed after else-clause")
	}
    ptr1.Next = ptr2
	if groupOf(ptr1) != groupOf(ptr2) {
		panic("ptr1 and ptr2 should have merged here")
	}
	grp1 = groupOf(ptr1)
    ptr1 = {}
	if grp1 == groupOf(ptr1) {
		panic("Group of ptr1 should have changed after assignment")
	}
	grp2 = groupOf(ptr2)
    ptr2.Next = {}
	if grp2 != groupOf(ptr2) {
		panic("Group of ptr2 should not have changed after assignment")
	}
}

func test7(pass int) {
    var ptr1 mut *S = {}
	var ptr2 mut *S = {}
	grp1 := groupOf(ptr1)
	if groupOf(ptr1) == groupOf(ptr2) {
		panic("ptr1 and ptr2 should not have merged")
	}
    if pass == 0 {
        ptr1 = null
    }
	if pass == 0 && grp1 == groupOf(ptr1) {
		panic("Group of ptr1 should have changed after if")
	}
	if pass == 0 && groupOf(ptr1) != 0 {
		panic("Group of ptr1 should be zero after if")
	}
	ptr2.Next = ptr1
	if groupOf(ptr1) != groupOf(ptr2) {
		panic("ptr1 and ptr2 should have merged here")
	}
}


func test8(pass int) {
    var ptr1 mut *S = {}
	var ptr2 mut *S = {}
	if pass == 0 {
		ptr1 = {}
	}
	if pass == 0 {
		ptr2 = {}
	}
	ptr1.Next = ptr2
	ptr3 := ptr1
	if groupOf(ptr3) != groupOf(ptr1) {
		panic("ptr3 must point to the same group as ptr1")
	}
	if groupOf(ptr3) != groupOf(ptr2) {
		panic("ptr3 must point to the same group as ptr2")
	}
	ptr1 = {}
	ptr2 = {}
	if groupOf(ptr3) == groupOf(ptr1) {
		panic("ptr3 must no longer point to the same group as ptr1")
	}
	if groupOf(ptr3) == groupOf(ptr2) {
		panic("ptr3 must no longer point to the same group as ptr2")
	}
}

func Main() {
	println("test1 ...")
	test1(0)
	test1(1)
	println("test2...")
	test2(0)
	test2(1)
	println("test3 ...")
	test3(0, {})
	test3(1, {})
	println("test4 ...")
	test4()
	println("test5 ...")
	test5(0)
	test5(1)
	println("test6 ...")
	test6(0)
	test6(1)
	println("test7...")
	test7(0)
	test7(1)
	println("test8...")
	test8(0)
	test8(1)
}
