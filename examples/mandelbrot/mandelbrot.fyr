import . from "<unistd.h>" {
    func write(int, #const char, int) int
} 

// This is the square of the limit that pixels will need to exceed in order to
// escape from the Mandelbrot set.
let LIMIT_SQUARED double = 4.0

// This controls the maximum amount of iterations that are done for each pixel.
let MAXIMUM_ITERATIONS int = 50

// Ensure image_Width_And_Height are multiples of 8.
let image_Width_And_Height int = 16000

var initial_r [16000]double = [...]
var initial_i [16000]double = [...]
// The generated PBM pixel data
var pixels [16000 * 16000 / 8]byte = [...]
// pixel_Group_r and pixel_Group_i store real and imaginary
// values for each pixel in the current pixel group as we perform
// iterations.
var pixel_Group_r [8]double = [...]
var pixel_Group_i [8]double = [...]

func calc() {
   for (var y = 0; y < image_Width_And_Height; y++) {
      
      let prefetched_Initial_i = initial_i[y]
      for (var x_Major = 0; x_Major < image_Width_And_Height; x_Major += 8) {
        
         // pixel_Group_r and pixel_Group_i store real and imaginary
         // values for each pixel in the current pixel group as we perform
         // iterations. Set their initial values here.
         for (var x_Minor = 0; x_Minor < 8; x_Minor++) {
            pixel_Group_r[x_Minor] = initial_r[x_Major + x_Minor]
            pixel_Group_i[x_Minor] = prefetched_Initial_i
         }

         // Assume all pixels are in the Mandelbrot set initially.
         var eight_Pixels byte = 0xff
         
         for (var iteration = MAXIMUM_ITERATIONS; eight_Pixels != 0 && iteration != 0; iteration--) {
            var current_Pixel_Bitmask byte = 0x80
            for (var x_Minor = 0; x_Minor < 8; x_Minor++) {
               let r = pixel_Group_r[x_Minor]
               let i = pixel_Group_i[x_Minor]

               pixel_Group_r[x_Minor] = r*r - i*i + initial_r[x_Major+x_Minor]
               pixel_Group_i[x_Minor] = 2.0 * r * i + prefetched_Initial_i

               // Clear the bit for the pixel if it escapes from the
               // Mandelbrot set.
               if (r*r + i*i > LIMIT_SQUARED) {
                  eight_Pixels &= ^current_Pixel_Bitmask
               }

               current_Pixel_Bitmask >>= 1
            }
         }

         pixels[y * image_Width_And_Height / 8 + x_Major / 8] = eight_Pixels
      }
   }
}

export func main() int {
    // Precompute the initial real and imaginary values for each x and y
    // coordinate in the image.
    for (var xy = 0; xy < image_Width_And_Height; xy++) {
        initial_r[xy] = 2.0 * <double>xy / <double>image_Width_And_Height - 1.5
        initial_i[xy] = 2.0 * <double>xy / <double>image_Width_And_Height - 1.0
    }
    // Compute the mandelbrot
    calc()
    // Write to stdout
    let header = "P4\n16000 16000\n"
    let n1 = write(1, <#const char>header, len(header))
    if (n1 != len(header)) {

    }
    let n2 = write(1, <#const char>&pixels, len(pixels))
    if (n2 != len(pixels)) {

    }
    return 0
}
