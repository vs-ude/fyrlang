component TestMe

import {
    "./test/demo"
}

type Kind Kind2
type Kind2 int

type Ptr mut *int

type IfaceBase interface{
    func mut Add(i int) int
    func ToInt() int
}

type Iface interface{
    IfaceBase
    func Print()
}

type S struct {
    B
    Iface
    field int
    arr []Kind
    name [256]int
    myptr -> *B
}

type B struct {
}

type Callback func(a int, b int) int

type Generic<X,Y> struct {
    a *X
    b *Y
}

type G1 Generic<int, int>
type G2 Generic<int, int>

type Point struct {
    X int
    Y int
}

type Difficult struct {
    A int
    P Point
    B int
}

var a int = 0
let c int = 5

func UseDemo() *demo.DemoStruct {

}

func DoMe() *Generic<S, B> {
    // Hello comment
}

func DoMe2(ptr *Generic<int, int>) {
    // Hello comment
}

func B.PrintMe() demo.Gini<int> {
}

func *B.PrintMePtr() {
}

func mut *B.MutMe(ptr -grp *S) {
}

func *Generic.CallMe(p X) {
}

func Log<X, Y>(a X) Y {
}

func aNonExportedFunc() {

}

func Expr(a int) {
    var b2 = true || false
    var b bool = false
    b && (true || b)
    // GEN "foo"!= "dudel"
    a == 5
    a != 5
    // `uint(a)
    var x int = 10
    x++
    var y uint64 = 0xffffffffffffffff
    i := 5
    y = 2
    var alpha, beta = -1, 2
    var gamma, delta float32 = 1, -3.4
    let ptr mut *B = null
    let ptr2 -grp *B = ptr
    var p Point = {X: 42}
    let px, py = p
    var arr [3]int
    arr = [1,2, 3]
    arr[2]
    // a[:6], a[7:], a[:], a[x:y]
    let ax, ay, az = arr
    let bx, by, bz int = arr
    let spx, spy int = p
    x, cy, cz := arr
    cpx, cy := p
    x, y = 4, 0
    var z, zz int
    x, z = p
    x, z, zz = arr
    // GEN arr = [1, 2, 3]
    var matrix [3][3]int = [[1,2,3],[4,5,6],[7,8,9]]
    matrix[1][2] = 42
    matrix[1][2]
    var slice []int = null
    slice[2]
    x = p.X
    var ptrToPoint *Point = null
    ptrToPoint.Y + (40 + 2)
    x = -1 << 2
    p = *ptrToPoint
    ptrToPoint = &p
    arr[x]
    if x == 0 {
        var p int
        p = 0
    } else if x == 1 {
        x = 2
    } else {
        x = 3
    }
    for x < 100 {
        x++
    }
    for x2 := 0; x2 < 10; x2++ {
        x2 = 1
    }
    var buffer [1024]byte = []
    var d Difficult = {A: 42}
    /*
    var newslice = new []int(100, 20)
    var newslice2 = new []int(1000)
    var newslice3 = new []int[1,2,3,4]
    var newslice4 = new []int
    var newarr = new [2]int[1,2]
    var newarr2 = new [2]int
    var newp = new Point
    var newp2 = new Point{X: 1, Y: 2}
    var newint = new int
    var newint2 = new int(42)
    */
}
