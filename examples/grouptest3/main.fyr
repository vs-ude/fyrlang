type S struct {
    x int
    y int
    next *S
}

/*****
 * Each comment line must yield an error when the line is un-commented.
 ****/

func test1(a -a mut *S, b - b mut *S) {
//	a.next = b
}

func test2(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = null
	var ptr2 mut *S = {}
	var ptr3 mut *S = {}
	ptr2.next = ptr3
	if pass == 0 {
		ptr = a
	} else {
		ptr = b
	}
	// ptr.next = b
	// ptr.next = a
	// a.next = ptr
	ptr.next = ptr
	a.next = ptr2
	// ptr2.next = ptr
	// ptr3.next = b
	var ptr4 mut *S = {}
	var ptr5 mut *S = {}
	ptr.next = ptr4
	ptr.next = ptr5
	ptr4.next = ptr
	ptr5.next = ptr4
}

func test3(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	if pass == 0 {
		ptr.next = a
	} else {
		ptr.next = b
	}
//	ptr.next = b
}

func test4(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	if pass == 0 {
		ptr.next = a
	}
//	ptr.next = b
}

func test5(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	if pass == 0 {
		ptr.next = a
	}
	ptr.next = a
}

func test6(pass int) {
	var ptr mut *S = null
	if pass == 0 {
		var s S = {}
		ptr = &s
		ptr.x = 42
	}
	// ptr.y = 42
}

func test7(pass int) {
	var ptr mut *S = null
	if pass == 0 {
		var s S = {}
		ptr = &s
		ptr.x = 42
		if pass == 0 {
			var s2 S = {}
			ptr.next = &s2
			ptr.x = 41
		}
		// ptr.y = 41
	}
	// ptr.y = 42
}

func test8(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = a
	for i := 0; i < pass; i++ {
//		ptr.next = b
	}
}

func test9(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = a
	for i := 0; i < pass; i++ {
		ptr2 := a
		ptr.next = a
		// ptr = b
		ptr2 = b
	}
}

func test10(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	for i := 0; i < pass; i++ {
		if pass == 0 {
			ptr.next = a
		} else {
//			ptr.next = b
		}
	}
}

func test11(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	for i := 0; i < pass; i++ {
		if pass == 0 {
			ptr.next = a
			continue
		}
//		ptr.next = b
	}
}

func test12(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	for i := 0; i < pass; i++ {
//		ptr.next = a
		if pass == 0 {
			ptr = b
			continue
		}
	}
}

func test13(a -a mut *S, b - b mut *S, pass int) {
	var ptr mut *S = {}
	for i := 0; i < pass; i++ {
		if pass == 0 {
			ptr = b
			break
		}
	}
	// ptr.next = a
}

func test14(a -a mut *S, b - b mut *S, pass int) {
	var ptr1 mut *S = {}
	var ptr2 mut *S = {}
	ptr1.next = ptr2
	for {
		if pass == 0 {
			ptr1.next = b
			break
		}
	}
	// ptr2.next = a
	ptr2.next = b
}

func test15(a -a mut *S, b - b mut *S, pass int) {
	var ptr1 mut *S = {}
	var ptr3 mut *S = {}
	ptr1.next = ptr3
	for {
		if pass > 0 {
			var ptr2 mut *S = {}
			ptr2.next = b
			ptr1.next = ptr2
			if pass == 0 {
				break
			}
			return
		}
	}
//	ptr3.next = a
}
