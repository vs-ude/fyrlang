type S struct {
    X int
    Y int
    Next *S
    Iso -> *S
}

func dome(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    ptr1.Next = ptrA
    // Should yield an error
    ptr1.Next = ptrB
}

func dome2(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var s S = {}
    var ptr2 mut *S = &s
    s.Next = ptr1
    // Should yield an error
    ptr1.Next = ptrA
}

func dome3(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    ptr1.Next = ptrA
    ptr1 = {}
    // Should work
    ptr1.Next = ptrB
}

func dome4(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    // Should not work
    ptr1.Iso = ptrA
}

func dome5(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var s S = {}
    var ptr2 mut *S = &s
    s.Next = ptr1
    // Should yield an error
    ptr1.Next = ptrA
}

func dome6(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var s S = {}
    var ptr2 mut *->*S = &s.Iso
    s.Next = ptr1
    // Should work, because s and ptr1 have not been merged.
    ptr1.Next = ptrA
    *ptr2 = {}
    // Should not work
    *ptr2 = ptrB
}

func dome7(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr2 mut *->*S = &ptr1.Iso
    // Should not work
    *ptr2 = ptrB
}

func dome8(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr3 *S = ptr1.Iso
    // Should not work, because of a type error
    // var ptr2 **S = &ptr1.Iso
}

func dome9(ptrA -a mut *S, ptrB -b mut *S) {
    var arr1 [2]-a*S = []
    arr1[0] = {}
    // Should not work
    arr1[1] = ptrB
}

func dome10(ptrA -a mut *S, ptrB -b mut *S) {
    // Should not work, because types with group spec cannot be infered
    // var arr1 [3]-a*S = [{}, {}, {}]
}

func alloc1(ptrA -a mut *S, ptrB -b mut *S) {
    // All allocations must happen with `a`
    var arr1 [3]-a*S = []
    arr1[2] = {}
}

func alloc2(ptrA -a mut *S, ptrB -b mut *S) {
    var arr1 [3]*S = [{}, {}, null]
    arr1[2] = {}
}

func alloc3(ptrA -a mut *S, ptrB -b mut *S) {
    // All allocations must happen with `a`
    var arr1 [3]*S = [{}, {}, null]
    arr1[2] = ptrA
}

func alloc4(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr mut *S = {}
    ptr.Iso = {}
    var ptr2 mut *S = {}
    ptr.Iso = ptr2
    var ptr3 mut *S = {}
    ptr.Next = ptr3
}

func Main() {
}