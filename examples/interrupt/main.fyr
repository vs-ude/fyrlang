func Main() {
	for {
		if data, ok := InterruptHandler.Buffer.Pull(); ok {
//			println("Got data")
//		}
	}
}

// This means that multiple threads can access this struct when it is
// exported by a component. The struct care about locking itself.
[concurrent]
type RingBuffer struct {
	start volatile int
	end volatile int
	buffer volatile [128]byte
}

func mut *RingBuffer.Push(data byte) bool {
	i := (this.end + 1) % 128
	if i == this.start {
		return false
	}
	this.buffer[this.end] = data
	this.end = i
}

func mut *RingBuffer.Pull() (byte, bool) {
	if this.start == this.end {
		return 0, false
	}
	b := this.buffer[this.start]
	this.start = (this.start + 1) % 128
	return b, true
}

[static]
component InterruptHandler

// export makes the variable accessible from outside the component.
// Since the data type is concurrent, enter() and leave() are not called
// when accessing the buffer.
[export] var Buffer RingBuffer = {}

// ISR means that this function is an interrupt handler.
// The component must be static to allow for this.
// The name of the function is exactly the symbol used for linking.
[isr nomangle]
func __vector_1() {
	Buffer.Push(42)
}

func enter() {
	// asm CLI
}

func leave() {
	// asm SEI
}
