type S struct {
    X int
    Y int
    Next *S
    Iso -> *S
}

func dome(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    if true {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable
        ptr1.Next = ptr2
    }
}

func dome2(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
    if true {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable
        ptr1.Next = ptr2
        // Groups of ptr1 and ptr2 should be merged
        ptr2.Next = ptr3
    }
}

func dome3(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
    // ptr3.Next = ptrA
    if true {
        var ptr2 mut *S = {}
        // ptr1 and ptr2 should use the same group variable
        ptr1.Next = ptr2
        // Groups of ptr2 and ptr3 should be merged
        ptr2.Next = ptr3
        // All groups must be merged with group `a`.
        ptr3.Next = ptrA
    }
}

func dome4(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
    ptr1 = {}
    ptr1.Next = ptr2
}

func dome5(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr3 mut *S = {}
    if (true) {
        ptr1 = {}
        var ptr2 mut *S = {}
    } else {
        ptr1 = {}
        ptr3 = {}
    }
    ptr1.Next = {}
    ptr3.Next = ptr1
}

func dome6(ptrA -a mut *S, ptrB -b mut *S) {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
    if (true) {
        ptr1 = {}
    } else {
        ptr2 = {}
    }
    ptr1.Next = ptr2
    ptr1 = {}
    ptr2.Next = {}
}

func Main() {

}