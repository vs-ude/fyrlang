type S struct {
    next *S
}

type S2 struct {
    sl -> mut []int
}

func Main() {
    var s1 mut []int = []
    s1 = append(s1, 2, 3, 4)
    var arr [3]int = [1, 2, 3]
    s1 = append(s1, ...s1, ...arr)

    var s2 mut[] mut*S = []
    var s3 mut[] mut*S = []
    var ptr mut *S = {}
    s2 = append(s2, ptr, ...s3)

    var p2 *S2 = {}
    var s4 = append(p2.sl, 4, 5)
}

func sliceMe2(s1 -a mut *S) (->[]rune, int) {
    s1.next = {}
    return [65, 66], 0
}

func sliceMe(s1 -a mut *S) ([]rune, int) {
    s1.next = {}
    return [65, 66], 0
}

func dummy() {
    // TODO: The slice should belong to an isolated group
    var p2 *S2 = {sl: []}
    // TODO: The type S2 needs a destructor
}

/*
func stringMe(data -a string) ([]rune, int) {
    return sliceMe(`[]byte(data))
}
*/

/*
func sliceMe(data -a []byte) (int) {
    return 0
}

func stringMe(data -a string) (int) {
    return sliceMe(`[]byte(data))
}
*/