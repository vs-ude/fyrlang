type S struct {
    X int
    Y int
    Next *S
	Other *S
    Iso -> *S
}

/*
func test1() {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
    for i := 1; i < 3; i++ {
        var ptr3 mut *S = {}
        // ptr1 and ptr3 should use the same group variable
        ptr1.Next = ptr3
        ptr1 = {}
        ptr1 = {}
        ptr2 = ptr1
        ptr1 = {}
    }
    ptr2.Next = {}
	ptr1.Next = {}
}
*/

func test2() {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
    ptr1.Iso = ptr2
	// Not allowed
	// ptr2.X = 42
	// TODO: Freeing ptr1 does not free the isolate it contains
}

func test3(pass int) {
    var ptr1 mut *S = {}
    var ptr2 mut *S = {}
	if pass == 0 {
		ptr1.Next = ptr2
		if groupOf(ptr1) != groupOf(ptr2) {
			panic("Groups should be merged")
		}
	}
	if pass == 0 && groupOf(ptr1) != groupOf(ptr2) {
		panic("Groups should be merged after if")
	}
	if pass == 1 && groupOf(ptr1) == groupOf(ptr2) {
		panic("Groups should not be merged when if-clause does not execute")
	}
	ptr2.Other = {}
}

func test4(pass int) {
    var ptr1 mut *S = {}
	grp1 := groupOf(ptr1)
	if pass == 0 {
		ptr1 = {}
	}
	ptr1.Other = {}
	if pass == 0 && groupOf(ptr1) == grp1 {
		panic("Expected different groups for the two allocations")
	}
	if pass != 0 && groupOf(ptr1) != grp1 {
		panic("Only one allocation, must be the same group still")
	}

    var ptr2 mut *S = {}
	grp2 := groupOf(ptr2)
	if pass == 0 {
		ptr2 = {}
		if groupOf(ptr2) == grp2 {
			panic("Expeted different groups for the two allocations")
		}
	}
	ptr2.Other = {}
	if pass == 0 && groupOf(ptr2) == grp2 {
		panic("Expeted different groups for the two allocations after if")
	}
	if pass != 0 && groupOf(ptr2) != grp2 {
		panic("Only one allocation, must be the same group still")
	}

	if pass == 0 {
		ptr1.Other = ptr2
		if groupOf(ptr1) != groupOf(ptr2) {
			panic("Both groups must have merged")
		}
	}
	if pass == 0 && groupOf(ptr1) != groupOf(ptr2) {
		panic("Both groups must have merged after if")
	}
	if pass != 0 && groupOf(ptr1) == groupOf(ptr2) {
		panic("No merge should have happened")
	}
}

/*
func test5() {
	var ptr1 mut *S = {}
	for i := 1; i < 3; i++ {
		if true {
			ptr1 = {}
		}
		ptr1.Next = {}
	}
	ptr1.Other = {}
}

func test6() {
	var ptr1 mut *S = {}
	for i := 1; i < 3; i++ {
		if true {
			var ptr2 mut *S = {}
		}
		ptr1.Next = {}
	}
	ptr1.Other = {}
}
*/

func Main() {
//	test1()
	println("test3 ...")
	test3(0)
	test3(1)
	println("test4 ...")
	test4(0)
	test4(1)
//	test5()
//	test6()
	println("Ok")
}
