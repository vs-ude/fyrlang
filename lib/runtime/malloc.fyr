/**************************************************
 *
 * A simple implementation for Malloc and Free.
 * This implementation uses libc malloc.
 *
 **************************************************/

// Import functions from libc
extern "C" {
    func calloc(count uint64, size uint64) mut #byte
    func free(ptr mut #byte)
    func exit(status int)
}

// Each malloc'ed area starts with this header, which implements a linked list.
// This list contains all malloc'ed areas belonging to a memory group.
// Consequently, a pointer to the first header of this list is a pointer to the memory group.
// To iterate the list, jump to the last element and from there proceed using `prev`.
// The last element in the list has a reference to itself in `last`.
// The first element in the list has a null pointer.
type groupHeader struct {
    next mut #groupHeader
	dtor func(ptr mut #byte, grp mut #uintptr)
	refCount uint64
}

type sliceGroupHeader struct {
	groupHeader
	count uint64
}

func derefGroupPointer(gptr mut #uintptr) mut #groupHeader {
	var p uintptr = *gptr
	for {
		// Mask the lowest bit
		deref := p &^ 1
		// The lowest bit was not set?
		if deref == p {
			return `mut #groupHeader(deref)
		}
		// deref is a pointer to another #uintptr. Dereference again
		p = *`mut #uintptr(deref)
	}
}

// Malloc allocates memory and attaches it to a memory group.
// `gptr` is a pointer to a group pointer.
// Initialliy `*gptr` can be zero.
// After Malloc returns, `*gptr` is a non-zero group pointer.
// If `*gptr` is not zero, the value of `*gptr` does not change.
// Malloc returns a pointer to an area that is large enough for `size` bytes.
// If allocation fails, the program terminates.
func Malloc(size uint64, gptr mut #uintptr, dtor func(ptr mut #byte, grp mut #uintptr)) mut #byte {
    // TODO: Check for overflow
    s := size + `uint64(`groupHeader`.size)
    alloc := calloc(1, s)
    if alloc == null {
        exit(1)
    }
    headerNew := `mut #groupHeader(alloc)
	headerNew.refCount = 1
    headerNew.next = headerNew
    headerPrev := derefGroupPointer(gptr)
    // Add the allocated area to an existing group (if *gptr is not null)
    if headerPrev == null {
        *gptr = `uintptr(headerNew)
    } else {
        headerNew.next = headerPrev.next
        headerPrev.next = headerNew
    }
	headerNew.dtor = dtor
    return alloc + `uintptr(`groupHeader`.size)
}

// MallocSlice allocates memory and attaches it to a memory group.
// `gptr` is a pointer to a group pointer.
// Initialliy `*gptr` can be zero.
// After Malloc returns, `*gptr` is a non-zero group pointer.
// If `*gptr` is not zero, the value of `*gptr` does not change.
// Malloc returns a pointer to an area that is large enough for `count * size` bytes.
// If allocation fails, the program terminates.
func MallocSlice(count uint64, size uint64, gptr mut #uintptr, dtor func(ptr mut #byte, grp mut #uintptr)) mut #byte {
    // TODO: Check for overflow
    s := count * size + `uint64(`sliceGroupHeader`.size)
    alloc := calloc(1, s)
    if alloc == null {
        exit(1)
    }
    headerNew := `mut #sliceGroupHeader(alloc)
	headerNew.refCount = 1
    headerNew.next = &headerNew.groupHeader
    headerPrev := derefGroupPointer(gptr)
    // Add the allocated area to an existing group (if *gptr is not null)
    if headerPrev == null {
        *gptr = `uintptr(headerNew)
    } else {
        headerNew.next = headerPrev.next
        headerPrev.next = &headerNew.groupHeader
    }
	headerNew.count = count
	headerNew.dtor = dtor
    return alloc + `uintptr(`sliceGroupHeader`.size)
}

// Free releases all memory associated with a memory group.
// `group` is either null or a group pointer as set by `Malloc`.
func Free(group uintptr) {
    // If the lower bit has been set, the handle can still be used for malloc, but
    // the handle should do nothing upon calling Free.
    if group == 0 || group & 1 != 0 {
        return
    }
    last := `mut #groupHeader(group)
	// Check ref-count first
	if last.refCount > 1 {
		last.refCount--
		return
	}
	// Run the destructors
	// We assume that all groupHeaders form a ring.
	// Thus, process all groupHeaders until `last` is reached again.
	h := last
    for {
		if h.dtor != null {
			ptr := `mut #byte(h) + `groupHeader`.size
			h.dtor(ptr, `mut #uintptr(&group))
		}
        h = h.next
		if h == last {
			break
		}
    }
    last = `mut #groupHeader(group)
	// We assume that all groupHeaders form a ring.
	// Thus, process all groupHeaders until `last` is reached again.
	h = last
    for {
        h2 := h.next
        free(`mut #byte(h))
        h = h2
		if h == last {
			break
		}
    }
}

func followGroupPointer(gptr mut #uintptr) mut #uintptr {
	p := gptr
	for {
		deref := *p
		// Mask the lowest bit
		derefCleared := deref &^ 1
		// The lowest bit was not set?
		if deref == derefCleared {
			return p
		}
		// deref is a pointer to another #uintptr. Dereference again
		p = `mut #uintptr(derefCleared)
	}
}

// Merge unites two groups into one and updates the group pointers accordingly.
// `gptr1` and `gptr2` are pointers to two group pointers and must not be null.
// However, `*gptr1` and `*gptr2` can be null and they can point to the same group.
func Merge(gptr1 mut #uintptr, gptr2 mut #uintptr) {
    g1 := followGroupPointer(gptr1)
    g2 := followGroupPointer(gptr2)
	// The two groups are already merged?
	if g1 == g2 {
		return
	}
	h1 := `mut #groupHeader(*g1)
	h2 := `mut #groupHeader(*g2)
	*g2 = `uintptr(g1) | 1
    if h1 == null {
		*g1 = `uintptr(h2)
        return
    }
    if h2 == null {
        return
    }
	tmp := h1.next
	h1.next = h2.next
	h2.next = tmp
}
